<?php

namespace Tests\Feature;

use Corals\Modules\Shortener\Models\ShortDomain;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class ShortDomainsTest extends TestCase
{
    use DatabaseTransactions;

    protected $shortDomain;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_short_domains_store()
    {
        $base_url = 'https://short-domains';
        $response = $this->post(
            'shortener/short-domains',
            [
                'title' => 'short-domains',
                'base_url' => $base_url,
                'status' => 'active',
            ]
        );

        $this->shortDomain = ShortDomain::query()->where('base_url', $base_url)->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('shortener/short-domains');

        $this->assertDatabaseHas('shortener_short_domains', [
            'title' => $this->shortDomain->title,
            'base_url' => $this->shortDomain->base_url,
        ]);
    }

    public function test_short_domains_show()
    {
        $this->test_short_domains_store();

        if ($this->shortDomain) {
            $response = $this->get('shortener/short-domains/' . $this->shortDomain->hashed_id);

            $response->assertViewIs('Shortener::shortDomains.show')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_short_domains_edit()
    {
        $this->test_short_domains_store();

        if ($this->shortDomain) {
            $response = $this->get('shortener/short-domains/' . $this->shortDomain->hashed_id . '/edit');

            $response->assertViewIs('Shortener::shortDomains.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_short_domains_update()
    {
        $this->test_short_domains_store();

        if ($this->shortDomain) {
            $response = $this->put('shortener/short-domains/' . $this->shortDomain->hashed_id, [
                'title' => $this->shortDomain->title,
                'base_url' => $this->shortDomain->base_url,
                'status' => $this->shortDomain->status,
            ]);

            $response->assertRedirect('shortener/short-domains');
            $this->assertDatabaseHas('shortener_short_domains', [
                'title' => $this->shortDomain->title,
                'base_url' => $this->shortDomain->base_url,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_short_domains_delete()
    {
        $this->test_short_domains_store();

        if ($this->shortDomain) {
            $response = $this->delete('shortener/short-domains/' . $this->shortDomain->hashed_id);

            $response->assertStatus(200)->assertSeeText('Short Domain has been deleted successfully.');

            $this->isSoftDeletableModel(ShortDomain::class);
            $this->assertDatabaseMissing('shortener_short_domains', [
                'title' => $this->shortDomain->title,
                'base_url' => $this->shortDomain->base_url,
            ]);
        }
        $this->assertTrue(true);
    }
}
