<?php

namespace Tests\Feature;

use Corals\Modules\Shortener\Models\TrackingPixel;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class TrackingPixelsTest extends TestCase
{
    use DatabaseTransactions;

    protected $trackingPixel;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_tracking_pixels_store()
    {
        $providers = config('shortener.models.tracking_pixel.providers');
        $provider = array_rand($providers);
        $response = $this->post(
            'shortener/tracking-pixels',
            [
                'name' => 'tracking_pixel',
                'provider' => $provider,
                'status' => 'active',
            ]
        );

        $this->trackingPixel = TrackingPixel::query()
            ->where('name', 'tracking_pixel')
            ->where('provider', $provider)
            ->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('shortener/tracking-pixels');

        $this->assertDatabaseHas('shortener_tracking_pixels', [
            'name' => $this->trackingPixel->name,
            'provider' => $this->trackingPixel->provider,
        ]);
    }

    public function test_tracking_pixels_edit()
    {
        $this->test_tracking_pixels_store();

        if ($this->trackingPixel) {
            $response = $this->get('shortener/tracking-pixels/' . $this->trackingPixel->hashed_id . '/edit');

            $response->assertViewIs('Shortener::trackingPixels.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_tracking_pixels_update()
    {
        $this->test_tracking_pixels_store();

        if ($this->trackingPixel) {
            $response = $this->put('shortener/tracking-pixels/' . $this->trackingPixel->hashed_id, [
                'name' => $this->trackingPixel->name,
                'provider' => $this->trackingPixel->provider,
                'status' => $this->trackingPixel->status,
            ]);

            $response->assertRedirect('shortener/tracking-pixels');
            $this->assertDatabaseHas('shortener_tracking_pixels', [
                'name' => $this->trackingPixel->name,
                'provider' => $this->trackingPixel->provider,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_tracking_pixels_delete()
    {
        $this->test_tracking_pixels_store();

        if ($this->trackingPixel) {
            $response = $this->delete('shortener/tracking-pixels/' . $this->trackingPixel->hashed_id);

            $response->assertStatus(200)->assertSeeText('Tracking Pixel has been deleted successfully.');

            $this->isSoftDeletableModel(TrackingPixel::class);
            $this->assertDatabaseMissing('shortener_tracking_pixels', [
                'name' => $this->trackingPixel->name,
                'provider' => $this->trackingPixel->provider,
            ]);
        }
        $this->assertTrue(true);
    }
}
